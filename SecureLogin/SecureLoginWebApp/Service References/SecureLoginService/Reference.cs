//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SecureLoginWebApp.SecureLoginService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="SecureLoginService.ISecureLoginService")]
    public interface ISecureLoginService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISecureLoginService/RegisterUser", ReplyAction="http://tempuri.org/ISecureLoginService/RegisterUserResponse")]
        bool RegisterUser(string Username, string Password, string emailId, string DateofBirth);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISecureLoginService/RegisterUser", ReplyAction="http://tempuri.org/ISecureLoginService/RegisterUserResponse")]
        System.Threading.Tasks.Task<bool> RegisterUserAsync(string Username, string Password, string emailId, string DateofBirth);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISecureLoginService/LoginValidation", ReplyAction="http://tempuri.org/ISecureLoginService/LoginValidationResponse")]
        bool LoginValidation(string Username, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISecureLoginService/LoginValidation", ReplyAction="http://tempuri.org/ISecureLoginService/LoginValidationResponse")]
        System.Threading.Tasks.Task<bool> LoginValidationAsync(string Username, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISecureLoginService/checkIfUserExists", ReplyAction="http://tempuri.org/ISecureLoginService/checkIfUserExistsResponse")]
        bool checkIfUserExists(string Username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISecureLoginService/checkIfUserExists", ReplyAction="http://tempuri.org/ISecureLoginService/checkIfUserExistsResponse")]
        System.Threading.Tasks.Task<bool> checkIfUserExistsAsync(string Username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISecureLoginService/checkIfAccountLocked", ReplyAction="http://tempuri.org/ISecureLoginService/checkIfAccountLockedResponse")]
        bool checkIfAccountLocked(string Username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISecureLoginService/checkIfAccountLocked", ReplyAction="http://tempuri.org/ISecureLoginService/checkIfAccountLockedResponse")]
        System.Threading.Tasks.Task<bool> checkIfAccountLockedAsync(string Username);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ISecureLoginServiceChannel : SecureLoginWebApp.SecureLoginService.ISecureLoginService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SecureLoginServiceClient : System.ServiceModel.ClientBase<SecureLoginWebApp.SecureLoginService.ISecureLoginService>, SecureLoginWebApp.SecureLoginService.ISecureLoginService {
        
        public SecureLoginServiceClient() {
        }
        
        public SecureLoginServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public SecureLoginServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SecureLoginServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SecureLoginServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool RegisterUser(string Username, string Password, string emailId, string DateofBirth) {
            return base.Channel.RegisterUser(Username, Password, emailId, DateofBirth);
        }
        
        public System.Threading.Tasks.Task<bool> RegisterUserAsync(string Username, string Password, string emailId, string DateofBirth) {
            return base.Channel.RegisterUserAsync(Username, Password, emailId, DateofBirth);
        }
        
        public bool LoginValidation(string Username, string Password) {
            return base.Channel.LoginValidation(Username, Password);
        }
        
        public System.Threading.Tasks.Task<bool> LoginValidationAsync(string Username, string Password) {
            return base.Channel.LoginValidationAsync(Username, Password);
        }
        
        public bool checkIfUserExists(string Username) {
            return base.Channel.checkIfUserExists(Username);
        }
        
        public System.Threading.Tasks.Task<bool> checkIfUserExistsAsync(string Username) {
            return base.Channel.checkIfUserExistsAsync(Username);
        }
        
        public bool checkIfAccountLocked(string Username) {
            return base.Channel.checkIfAccountLocked(Username);
        }
        
        public System.Threading.Tasks.Task<bool> checkIfAccountLockedAsync(string Username) {
            return base.Channel.checkIfAccountLockedAsync(Username);
        }
    }
}
